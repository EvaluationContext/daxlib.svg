DEFINE

function DaxLib.SVG.Compound.Line2 =
			(
				x: INT64,
				y: INT64,
				width: INT64,
				height: INT64,
				paddingX: DOUBLE,
				paddingY: DOUBLE,
				contextTable: ANYREF EXPR,
				axisRef: ANYREF EXPR,
				measureRef: NUMERIC EXPR,
				lineColor: STRING
			) =>

				// Apply padding to dimensions
				VAR _X = 			x + (width * (IF(ISBLANK(paddingX), 0, paddingX) / 2))
				VAR _Y = 			y + (height * (IF(ISBLANK(paddingY), 0, paddingY) / 2))
				VAR _Width = 		width * (1 - IF(ISBLANK(paddingX), 0, paddingX))
				VAR _Height = 		height * (1 - IF(ISBLANK(paddingY), 0, paddingY))
			
				// I only have the index because I don't have a better way of filtering down to current row
				// Handle case where axisRef might be blank or out of scope
				//VAR _UseIndexFiltering = CALCULATE( COUNTROWS( contextTable ) ) > 1 || NOT ISBLANK( contextTable )
			
				// Replace contextTable with Index
				VAR _ContextTableIndex =
					ADDCOLUMNS(
						CALCULATETABLE(
							FILTER(
								KEEPFILTERS( contextTable ),
								NOT ISBLANK( measureRef )
							),
							ALLSELECTED()
						),
						"@Index", RANK( DENSE, CALCULATETABLE( contextTable, ALLSELECTED() ) )
					)

				VAR _currentIndex =
					// MAXX(
						NATURALINNERJOIN(
							_ContextTableIndex,
							CALCULATETABLE( contextTable )
						)
					// 	[@Index]
					// )

				// Add in axisRef and evaulate measure
				// VAR _Data = 
				// 	FILTER(
				// 		ADDCOLUMNS(
				// 			GENERATE(
				// 				_ContextTableIndex,
				// 				VALUES( axisRef )
				// 			),
				// 			"@Value", measureRef
				// 		),
				// 		NOT ISBLANK( [@Value] )
				// 	)
				
				// VAR _XMin = 	MINX( _Data, axisRef )
				// VAR _XMax = 	MAXX( _Data, axisRef )
				// VAR _RawYMin = 	MINX( _Data, [@Value] )
				// VAR _YMin = 	IF( _RawYMin > 0, 0, _RawYMin )
				// VAR _YMax = 	MAXX( _Data, [@Value] )

				// // Filter to current context
				// VAR _DataPerCurrentContext =
				// 	FILTER(
				// 		_Data,
				// 		[@Index] = _currentIndex
				// 	)

				// // Points
				// VAR _Points = 
				// 	CONCATENATEX(
				// 		_DataPerCurrentContext,
				// 		IF( 
				// 			NOT ISBLANK( [@Value] ), 
				// 			COMBINEVALUES( 
				// 				",", 
				// 				DaxLib.SVG.Scale.Normalize( axisRef, _XMin, _XMax, _X, _X + _Width ), 
				// 				DaxLib.SVG.Scale.Normalize( [@Value], _YMin, _YMax, _Y + _Height, _Y )
				// 			)
				// 		),
				// 		" ",
				// 		axisRef,
				// 		ASC
				// 	)

				// // Line Element
				// VAR _LineElement =
				// 	DaxLib.SVG.Element.Polyline(
				// 		_Points,	// points
				// 		DaxLib.SVG.Attr.Shapes(
				// 			"none",		// fill
				// 			BLANK(),	// fillOpacity
				// 			BLANK(),	// fillRule
				// 			IF( NOT ISBLANK( lineColor ), lineColor, "#01B8AA" ), // stroke
				// 			1,			// stroke
				// 			BLANK(),	// strokeOpacity
				// 			BLANK()		// opacity
				// 		),
				// 		BLANK()			// transforms
				// 	)

				// // Single Point Element
				// VAR _SinglePointElement =
				// 	DaxLib.SVG.Element.Circle(
				// 			DaxLib.SVG.Scale.Normalize( MAXX( _DataPerCurrentContext, axisRef ), _XMin, _XMax, _X, _X + _Width ), // cx
				// 			DaxLib.SVG.Scale.Normalize( MAXX( _DataPerCurrentContext, [@Value] ), _YMin, _YMax, _Y + _Height, _Y ), // cy
				// 			2,           	// r
				// 			DaxLib.SVG.Attr.Shapes(
				// 				lineColor, 	// fill
				// 				BLANK(),    // fillOpacity
				// 				BLANK(),    // fillRule
				// 				BLANK(),    // stroke
				// 				BLANK(),    // strokeWidth
				// 				BLANK(),    // strokeOpacity
				// 				BLANK()     // opacity
				// 			),
				// 			BLANK()         // transforms
				// 		)

				// VAR _CombinedElement = 
					// IF(
					// 	COUNTROWS( _DataPerCurrentContext ) = 1,
					// 	_SinglePointElement,
					// 	_LineElement
					// )

				RETURN
					TOJSON( _currentIndex )
					//IF( NOT ISEMPTY( _DataPerCurrentContext ), _CombinedElement )

EVALUATE
{DaxLib.SVG.Compound.Line2(
			0,                  // x
			0,                  // y
			100,                // width
			20,                 // height
			0.05,               // paddingX
			0.02,               // paddingY
			SUMMARIZE( Orders, Products[Brand] ), // contextTable
			Dates[Date],        // xAxis
			[Total Cost],       // measureVal
			DaxLib.SVG.Colour.Theme(
				MAX( Theme[Theme] ),
				MIN( Variant[Variant] )
			)                   // lineColour
		)}

EVALUATE
SUMMARIZECOLUMNS(
	Products[Brand],
	"x",
	DaxLib.SVG.Compound.Line2(
			0,                  // x
			0,                  // y
			100,                // width
			20,                 // height
			0.05,               // paddingX
			0.02,               // paddingY
			SUMMARIZE( Orders, Products[Brand] ), // contextTable
			Dates[Date],        // xAxis
			[Total Cost],       // measureVal
			DaxLib.SVG.Colour.Theme(
				MAX( Theme[Theme] ),
				MIN( Variant[Variant] )
			)                   // lineColour
		)
)
